/************************TRICK HEADER*************************
PURPOSE:
    (This S_define works with the RUN_analytic input file)
LIBRARY DEPENDENCIES:
    (

    )
*************************************************************/

#include "sim_objects/default_trick_sys.sm"
##include "hello.h"
##include "dcmbus.h"
##include <libgen.h>

class SDTSimObject : public Trick::SimObject {

    public:
        struct dcmbus_ctrlblk_t dcmbus_obj;
        double int_step = 0.05;
        double send_delay = 0.005;
        int data = 5566;
        void get_exe_path(void) {
            char path[500] = {0};
            int dest_len = 500;
            if (readlink ("/proc/self/exe", path, dest_len) != -1)
            {
                dirname(path);
                strcat(path, "/");
                printf("path=%s\n", path);
            }
        };
        void trick_heartbeat(void) {
            char date_buf[80];
            char currentTime[84] = "";
            static struct timespec ts;
            uint32_t milli;
            char name[] = "TRICK_HOME";
            clock_gettime(CLOCK_MONOTONIC, &ts);
            ts.tv_sec = time(NULL);
            milli = ts.tv_nsec / 1000000;
            strftime(date_buf, (size_t) 20, "%Y/%m/%d,%H:%M:%S", localtime(&ts.tv_sec));
            snprintf(currentTime, sizeof(currentTime), "%s.%03d", date_buf, milli);
            fprintf(stderr, "[Client %s] sim_time = %f\n", currentTime, exec_get_sim_time());
        };

        SDTSimObject()
        {
        	/* [C<#>] [{job_tag}] [P<#>] ([<cycle_time>, [<start_time>, [<stop_time>,]]] <job_class>) <module>([args]) ; */
            ("initialization") dcmbus_ctrlblk_init (&dcmbus_obj, "dcm_client_ring.cfg", "dcm_client_channel.cfg", "dcm_client_bind.cfg", 0);
            P1 (1, "scheduled") trick_heartbeat();
            P1 (1, "scheduled") dcmbus_tx_direct(&dcmbus_obj, "fsw-egse", &data, 4);
            ("shutdown") dcmbus_ctrlblk_deinit(&dcmbus_obj);
        }
} ;

SDTSimObject dyn ;